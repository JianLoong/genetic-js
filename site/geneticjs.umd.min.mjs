!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.geneticjs=t():e.geneticjs=t()}(this,(function(){return(()=>{"use strict";var e={638:(e,t,s)=>{s.r(t),s.d(t,{AlternatingPointCrossover:()=>m,AndTermination:()=>A,BinaryChromosomeBase:()=>o,ChromosomeBase:()=>r,ChromosomeExtension:()=>i,CrossoverBase:()=>u,DecimalChromosome:()=>h,EliteSelection:()=>N,ElitistReinsertion:()=>E,FitnessBasedReinsertion:()=>z,FitnessStagnationTermination:()=>D,FitnessThresholdTermination:()=>j,FlipBitMutation:()=>R,FloatingPointChromosome:()=>l,FuncFitness:()=>w,Generation:()=>G,GenerationNumberTermination:()=>I,GeneticAlgorithm:()=>O,MutationBase:()=>C,OnePointCrossover:()=>d,OrTermination:()=>L,OrderedCrossover:()=>p,PartialShuffleMutation:()=>P,Population:()=>x,RankSelection:()=>B,ReverseSequenceMutation:()=>T,RouletteWheelSelection:()=>q,TimeEvolvingTermination:()=>U,UniformCrossover:()=>g,UniformMutation:()=>S});class r{constructor(e){this.validateLength(e),this.length=e,this.genes=[]}getGene(e){return this.genes[e]}getGenes(){return this.genes}replaceGene(e,t){if(e<0||e>this.length)throw Error("ChromosomeBase - Index cannot be less than 0 and more than the length. "+e);this.genes[e]=t,this.fitness=null}replaceGenes(e,t){if(e<0)throw new Error("Start Index cannot be less than 0");const s=t.length;if(this.length-e<s)throw new Error("ChromosomeBase - Not enough space to replace genes.");for(let s=e;s<t.length;s++)this.replaceGene(s,t[s])}resize(e){this.validateLength(e)}toString(){return this.genes.toString()}createGenes(){for(let e=0;e<this.length;e++)this.replaceGene(e,this.generateGene(e))}validateLength(e){if(e<2)throw Error("Error - The minimum length for a chromosome is 2 genes")}}class n{constructor(e){this.mValue=e}equals(e){return null!=e&&e.mValue===this.mValue}equalsOperator(e,t){return e.equals(t)}notEqualsOperator(e,t){return!e.equals(t)}toString(){return(null!=this.mValue?this.mValue:"").toString()}}class o extends r{constructor(e){super(e)}flipGene(e){const t=this.getGene(e);if(void 0===t)throw new Error("BinaryChromosomeBase - Cannot Flip a gene which is undefined");this.replaceGene(e,new n(0===t.mValue?1:0))}toString(){return this.getGenes().toString()}}class i{static anyHasRepeatedGene(e){for(const t of e){const e=t,s=[];if(e.getGenes().forEach((e=>s.push(e.mValue))),[...new Set(s)].length<e.length)return!0}return!1}static validateGenes(e,t){if(void 0!==e&&void 0===e.getGenes())return!1;if(void 0!==t)for(const e of t)if(void 0===e.getGenes())return!1;return!0}}class a{}a.current=new class extends class{getInts(e,t,s){const r=[];for(let n=0;n<e;n++)r.push(this.getInt(t,s));return r}}{getDouble(e,t){return void 0===e||void 0===t?Math.random():Math.random()*(t-e)+e}getFloat(e,t){return Math.random()*(t-e)+e}getInt(e,t){return e=Math.ceil(e),t=Math.floor(t),Math.floor(Math.random()*(t-e)+e)}getUniqueInts(e,t,s){const r=[];for(let e=t;e<s;e++)r.push(e);return r.sort((()=>.5-Math.random())).slice(0,e)}};class h extends r{constructor(e,t,s,r,n){super(e),this.minValue=t,this.maxValue=s,this.unique=void 0!==r,this.randomValues=void 0===n?!0===r?a.current.getUniqueInts(e,t,s):a.current.getInts(e,t,s):n,this.createGenes()}createNew(){return new h(this.length,this.minValue,this.maxValue)}generateGene(e){return new n(this.randomValues[e])}}class c{}c.convertBinToFloat32=e=>{const t=parseInt(e,2);if(t>0||t<0){const e=t>>>31?-1:1;let s=(t>>>23&255)-127;const r=(8388608+(8388607&t)).toString(2);let n=0;for(let e=0;e<r.length;e+=1)n+=parseInt(r[e])?Math.pow(2,s):0,s--;return n*e}return 0},c.convertFloat32ToBin=e=>{const t=new DataView(new ArrayBuffer(4));return t.setFloat32(0,e),s=Array.apply(null,{length:4}).map(((e,s)=>(e=>("00"+e.toString(16)).slice(-2))(t.getUint8(s)))).join(""),parseInt(s,16).toString(2).padStart(32,"0");var s},c.convertFloat32ToHex=e=>{const t=new DataView(new ArrayBuffer(4));return t.setFloat32(0,e),Array.apply(null,{length:4}).map(((e,s)=>(e=>("00"+e.toString(16)).slice(-2))(t.getUint8(s)))).join("")},c.convertHexToFloat32=e=>{const t=parseInt(e,16);if(t>0||t<0){const e=t>>>31?-1:1;let s=(t>>>23&255)-127;const r=(8388608+(8388607&t)).toString(2);let n=0;for(let e=0;e<r.length;e+=1)n+=parseInt(r[e])?Math.pow(2,s):0,s--;return n*e}return 0};class l extends o{constructor(e,t,s=!0){let r=0;t.forEach((e=>r+=e.toString(2).length)),super(!0===s?r:32*e.length),this.minValue=e,this.maxValue=t,this.isIntValue=s,this.originalValue=this.flatten(e,t),this.createGenes()}createNew(){return new l(this.minValue,this.maxValue,this.isIntValue)}ensureCapacity(){return!0}expand(){const e=[],t=this.getGenes();if(!0===this.isIntValue){const s=[];for(const e of this.maxValue)s.push(e.toString(2).length);for(let r=0,n=0;r<t.length;r+=s[n],n++){const o=t.slice(r,r+s[n]).toString().replace(/,/g,"");e.push(parseInt(o,2))}}else for(let s=0;s<t.length;s+=32){const r=t.slice(s,s+32).toString().replace(/,/g,"");e.push(c.convertBinToFloat32(r))}return e}flatten(e,t){let s="";if(!0===this.isIntValue)for(let r=0;r<e.length;r++){const n=e[r],o=t[r];let i=0;i=a.current.getInt(n,o);const h=o.toString(2).length;s+=i.toString(2).padStart(h,"0")}else for(let r=0;r<e.length;r++){const n=e[r],o=t[r];let i=0;i=a.current.getFloat(n,o),s+=c.convertFloat32ToBin(i)}return s.split("").map(Number)}generateGene(e){const t=this.originalValue[e];return new n(t)}}class u{constructor(e,t,s){this.parentNumber=e,this.childrenNumber=t,this.minChromosomeLength=s}cross(e){if(null==e)throw new Error("Error - CrossOverbase: Number of parents cannot be null.");if(e[0].length<this.minChromosomeLength)throw new Error("Error: A chromosome should have at least 0 genes");return this.performCross(e)}}class m extends u{constructor(){super(2,2)}performCross(e){const t=e[0],s=e[1];if(i.anyHasRepeatedGene(e))throw new Error("Alternating cross over has repeated");return[this.createChild(t,s),this.createChild(s,t)]}createChild(e,t){const s=[],r=new h(e.length),o=[...e.getGenes()],i=[...t.getGenes()],a=[],c=[];o.forEach((e=>a.push(e.mValue))),i.forEach((e=>c.push(e.mValue)));const l=o.length;for(;s.length<l;)s.includes(a[0])?a.shift():s.push(a.shift()),s.includes(c[0])?c.shift():s.push(c.shift());for(let t=0;t<e.length;t++)r.replaceGene(t,new n(s[t]));return r}}class d extends u{constructor(e){super(2,2),void 0!==e&&(this.swapPointIndex=e)}performCross(e){const t=e[0],s=e[1],r=t.getGenes().length-1;if(void 0===this.swapPointIndex&&(this.swapPointIndex=a.current.getInt(0,t.getGenes().length-1)),this.swapPointIndex>=r)throw new Error("SwapPointIndex - The swap point index.");return this.createChildren(t,s)}createChild(e,t){const s=this.swapPointIndex+1,r=e.createNew(),n=e.getGenes().slice(0,s),o=t.getGenes().slice(s,t.getGenes().length-1),i=n.concat(o);return r.replaceGenes(0,i),r}createChildren(e,t){return[this.createChild(e,t),this.createChild(t,e)]}}class f{}f.orderedCrossover=(e,t,s,r)=>{const n=[...e];let o=[...t];const i=e.length,h=a.current.getUniqueInts(2,0,i).sort(((e,t)=>e-t));void 0===s&&(s=h[0]),void 0===r&&(r=h[1]);const c=[],l=[];for(let e=s;e<r;e++)l.push(n[e]),c[e]=n[e];o=o.filter((e=>!l.includes(e)));for(let e=0;e<s;e++)c[e]=o.shift();for(let e=r;e<i;e++)c[e]=o.shift();return c},f.pmxCrossOver={};class p extends u{constructor(){super(2,2),this.isOrdered=!0}performCross(e){const t=e[0],s=e[1];if(!i.validateGenes(t))throw new Error("Ordered Crossover - Cannot be used! Parent has duplicate genes.");if(i.anyHasRepeatedGene([t,s]))throw new Error("Ordered Crossover - Parents have repeated genes");let r=a.current.getUniqueInts(2,0,t.length);r=r.sort(((e,t)=>e-t));const n=r[0],o=r[1];return[this.createChild(t,s,n,o),this.createChild(s,t,n,o)]}createChild(e,t,s,r){const n=e.getGenes(),o=t.getGenes(),i=f.orderedCrossover(n,o,s,r),a=e.createNew();let h=0;for(const e of i)a.replaceGene(h,e),h++;return a}}class g extends u{constructor(e){super(2,2),this.mixProbability=e}performCross(e){const t=e[0],s=e[1],r=t.createNew(),n=s.createNew(),o=[];for(let e=0;e<t.length;e++)Math.random()<this.mixProbability?(r.replaceGene(e,r.getGene(e)),n.replaceGene(e,s.getGene(e))):(r.replaceGene(e,s.getGene(e)),n.replaceGene(e,t.getGene(e)));return o.push(r),o.push(n),o}}class w{constructor(e){this.mFunc=e}evaluate(e){return this.mFunc(e)}}class v{cross(e,t,s,r){const n=e.minSize;let o=[];for(let e=0;e<n;e+=t.parentNumber){const e=r.slice(2).splice(0,t.parentNumber);if(e.length===t.parentNumber&&a.current.getDouble()<=s){const s=t.cross(e);o=o.concat(s)}}return o}mutate(e,t,s){for(const r of s)e.mutate(r,t)}}class C{mutate(e,t){this.performMutate(e,t)}}class S extends C{performMutate(e,t){throw new Error("Method not implemented.")}}class G{constructor(e,t,s=!0){if(e<1)throw new Error("Generation number "+e+"is invalid.");if(t.length<2)throw new Error("A generation should have at least 2 chromosome");this.num=e,this.creationDate=new Date,this.chromosomes=t,this.isMaximized=s}end(e){this.isMaximized?this.chromosomes=this.chromosomes.filter((e=>!0===this.validateChromosome(e))).sort(((e,t)=>t.fitness-e.fitness)):this.chromosomes=this.chromosomes.filter((e=>!0===this.validateChromosome(e))).sort(((e,t)=>e.fitness-t.fitness)),this.chromosomes=this.chromosomes.slice(0,e),this.bestChromosome=Object.assign(this.chromosomes[0],this.bestChromosome)}getChromosome(){return this.chromosomes}toString(){return this.bestChromosome.getGenes().toString()}validateChromosome(e){if(null==e.fitness)throw new Error("No fitness");return!0}}class x{constructor(e,t,s,r=!0){if(this.toString=()=>{let e="";for(const t of this.generations)e+=this.generations.toString();return e},e<2)throw new Error;if(t<e)throw new Error;this.creationDate=new Date,this.minSize=e,this.maxSize=t,this.generations=[],this.adamChromosome=s,this.bestChromosome=s,this.isMaximized=r,this.createInitialGeneration()}createInitialGeneration(){this.generations=[],this.generationNumber=0;const e=[];for(let t=0;t<this.minSize;t++){const t=this.adamChromosome.createNew();if(null==t)throw new Error("Initial chromosome cannot be created.");e.push(t)}this.createNewGeneration(e)}createNewGeneration(e){this.currentGeneration=new G(++this.generationNumber,e,this.isMaximized),this.generations.push(this.currentGeneration)}endCurrentGeneration(){this.currentGeneration.end(this.maxSize),(this.bestChromosome.fitness<this.currentGeneration.chromosomes[0].fitness||void 0===this.bestChromosome)&&(this.bestChromosome=this.currentGeneration.chromosomes[0])}}class b{constructor(e,t){this.canCollapse=e,this.canExpand=t}selectChromosome(e,t,s){if(void 0===e)throw new Error("The population is undefined.");if(!this.canExpand&&t.length<e.minSize)throw new Error("Chromosome cannot be selected as the number of offsprings exceed the min size of the population.");return this.performSelectChromosome(e,t,s)}}class E extends b{constructor(e=!0){super(!1,!0),this.isMaximized=e}performSelectChromosome(e,t,s){const r=e.minSize-t.length;let n=[];if(r>0){const e=[...s];n=this.isMaximized?e.sort(((e,t)=>t.fitness-e.fitness)).slice(0,r):e.sort(((e,t)=>e.fitness-t.fitness)).slice(0,r)}return t.concat(n)}}class M{constructor(e){this.minNumberChromosome=e}selectChromosomes(e,t){if(e<this.minNumberChromosome)throw new Error("");return this.performSelectChromosome(e,t)}}class N extends M{constructor(e=!0){super(2)}performSelectChromosome(e,t){if(void 0===t)throw new Error("EliteSelection - No generation for Elite Selection");return t.getChromosome().sort(((e,t)=>t.fitness-e.fitness)).slice(0,e)}}class y{hasReached(e){return this.mHasReached=this.performHasReached(e),this.mHasReached}}class I extends y{constructor(e){super(),this.expectedGenerationNumber=null==e?100:e}performHasReached(e){return e.generationsNumber>=this.expectedGenerationNumber}}var F;!function(e){e[e.NotStarted=0]="NotStarted",e[e.Started=1]="Started",e[e.Stopped=2]="Stopped",e[e.Resumed=3]="Resumed",e[e.TerminationReached=4]="TerminationReached"}(F||(F={}));class O{constructor(e,t,s=new N,r=new g(.5),n=new S,o=new E,i=new I(100)){this.defaultCrossOverProbability=.75,this.defaultMutationProbability=.3,this.isFitnessMaximized=!0,this.start=e=>{const t=[];for(this.timeEvolving=new Date;!1===this.termination.hasReached(this);){this.evolveOneGeneration(),t.push(this.bestChromosome),this.generationsNumber++;const s=this.bestChromosome;void 0!==e&&e.next(s),this.geneticAlgorithmState=F.TerminationReached}return t},this.fitnessMap=e=>{const t=new Map;if(void 0===t.get(e)){const s=this.fitness.evaluate(e);return t.set(e,s),s}return t.get(e)},this.promiseArr=e=>{const t=[];for(let s=0;s<e;s++){const e=new Promise(((e,t)=>e(this.evolveOneGeneration())));t.push(e)}Promise.all(t).then((e=>{}))},this.selection=s,this.population=e,this.fitness=t,this.crossOver=r,this.mutation=n,this.termination=i,this.operatorStrategy=new v,this.reinsertion=o,this.generationsNumber=0,this.geneticAlgorithmState=F.NotStarted}clone(){return new O(new x(this.population.minSize,this.population.maxSize,this.population.bestChromosome),this.fitness,this.selection,this.crossOver,this.mutation,this.reinsertion,this.termination)}evolveOneGeneration(){this.evaluateFitness();const e=this.selectParents(),t=this.cross(e);this.mutate(t);const s=this.reinsert(t,e);return this.population.createNewGeneration(s),this.endCurrentGeneration()}cross(e){return this.operatorStrategy.cross(this.population,this.crossOver,this.defaultCrossOverProbability,e)}endCurrentGeneration(){return this.evaluateFitness(),this.population.endCurrentGeneration(),this.bestChromosome=this.population.bestChromosome,!0}evaluateFitness(){const e=this.population.currentGeneration.chromosomes;for(const t of e){const e=t,s=this.fitnessMap(e);e.fitness=s}}mutate(e){this.operatorStrategy.mutate(this.mutation,this.defaultMutationProbability,e)}reinsert(e,t){return this.reinsertion.selectChromosome(this.population,e,t)}selectParents(){return this.selection.selectChromosomes(this.population.minSize,this.population.currentGeneration)}}class R extends C{constructor(){super(),this.rnd=a.current}performMutate(e,t){const s=e;if(null==s)throw new Error("Flip bit cant be done");if(this.rnd.getDouble()<=t){const t=this.rnd.getInt(0,e.length);s.flipGene(t)}}}class V extends C{performMutate(e,t){this.validateLength(e);const s=a.current;if(s.getDouble()<=t){const t=s.getUniqueInts(2,0,e.length).sort(((e,t)=>e-t)),r=t[0],n=t[1],o=e.getGenes().slice(r,n),i=this.mutateOnSequence(o);e.replaceGenes(r,i)}}validateLength(e){if(e.length<3)throw new Error("SequenceMutationBase - A chromosome should have at least 3 genes")}}class P extends V{mutateOnSequence(e){return[...e].sort((()=>.5-Math.random()))}}class T extends V{mutateOnSequence(e){return e.reverse()}}class z extends b{constructor(){super(!1,!0)}performSelectChromosome(e,t,s){return t.length>e.maxSize?t.sort(((e,t)=>t.fitness-t.fitness)).slice(0,e.maxSize-1):t}}class B extends M{constructor(e=!0){super(2)}performSelectChromosome(e,t){if(void 0===t)throw new Error("EliteSelection - No generation for Elite Selection");return t.getChromosome().sort(((e,t)=>t.fitness-e.fitness)).slice(0,e)}}class q extends M{constructor(){super(2),this.pick=e=>{let t=0;for(const s of e.chromosomes)t+=s.fitness;const s=a.current.getInt(0,t),r=e.chromosomes.sort(((e,t)=>t.fitness-e.fitness));let n=0;for(const e of r)if(n+=e.fitness,n>s)return e;return r[0]}}performSelectChromosome(e,t){if(void 0===t)throw new Error("EliteSelection - No generation for Elite Selection");const s=[];for(let r=0;r<e;r++){const e=this.pick(t);s.push(e)}return s}}class H{constructor(e,t){void 0===e&&(this.minOperands=2),this.terminations=[],void 0!==t&&this.terminations.concat(t)}hasReached(e){if(this.terminations.length<this.minOperands)throw new Error("There should be at least one termination.");return this.performHasReached(e)}}class A extends H{constructor(e){super(e.length,e)}performHasReached(e){let t=!1;for(const s of this.terminations)if(t=s.hasReached(e),!1===t)return!1;return!0}}class D extends y{constructor(e){super(),this.expectedStagnationGenerationNumber=null==e?100:e}performHasReached(e){if(void 0===e.bestChromosome)return!1;const t=e.bestChromosome.fitness;return this.mLastFitness===t?this.mStagnantGenerationCount++:this.mStagnantGenerationCount=1,this.mLastFitness=t,this.mStagnantGenerationCount>=this.expectedStagnationGenerationNumber}}class j extends y{constructor(e){super(),this.expectedFitness=void 0===e||null==e?1:e}performHasReached(e){return e.bestChromosome.fitness>=this.expectedFitness}}class L extends H{performHasReached(e){let t=!1;for(const s of this.terminations)if(t=s.hasReached(e),!0===t)return!0;return!1}}class U extends y{constructor(e){super(),this.maxTime=void 0===e?10:e}performHasReached(e){return((new Date).getTime()-e.timeEvolving.getTime())/1e3>this.maxTime}}}},t={};function s(r){if(t[r])return t[r].exports;var n=t[r]={exports:{}};return e[r](n,n.exports,s),n.exports}return s.d=(e,t)=>{for(var r in t)s.o(t,r)&&!s.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s(638)})()}));