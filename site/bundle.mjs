!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.geneticjs=t():e.geneticjs=t()}(self,(function(){return(()=>{"use strict";var e={590:(e,t,r)=>{r.r(t),r.d(t,{AlternatingPointCrossover:()=>m,AndTermination:()=>F,BinaryChromosomeBase:()=>o,ChromosomeBase:()=>s,ChromosomeExtension:()=>i,CrossoverBase:()=>u,DecimalChromosome:()=>h,FitnessStagnationTermination:()=>R,FitnessThresholdTermination:()=>T,FlipBitMutation:()=>M,FloatingPointChromosome:()=>c,Generation:()=>G,GenerationNumberTermination:()=>y,GeneticAlgorithm:()=>I,MutationBase:()=>C,OnePointCrossover:()=>p,OrderedCrossover:()=>f,PartialShuffleMutation:()=>O,Population:()=>b,ReverseSequenceMutation:()=>P,UniformCrossover:()=>g,UniformMutation:()=>v});class s{constructor(e){this.validateLength(e),this.length=e,this.genes=[]}getGene(e){return this.genes[e]}getGenes(){return this.genes}replaceGene(e,t){if(e<0||e>this.length)throw Error("ChromosomeBase - Index cannot be less than 0 and more than the length. "+e);this.genes[e]=t,this.fitness=null}replaceGenes(e,t){if(e<0)throw new Error("Start Index cannot be less than 0");const r=t.length;if(this.length-e<r)throw new Error("ChromosomeBase - Not enough space to replace genes.");for(let r=e;r<t.length;r++)this.replaceGene(r,t[r])}resize(e){this.validateLength(e)}createGenes(){for(let e=0;e<this.length;e++)this.replaceGene(e,this.generateGene(e))}validateLength(e){if(e<2)throw Error("Error - The minimum length for a chromosome is 2 genes")}}class n{constructor(e){this.mValue=e}equals(e){return null!=e&&e.mValue===this.mValue}equalsOperator(e,t){return e.equals(t)}notEqualsOperator(e,t){return!e.equals(t)}toString(){return(null!=this.mValue?this.mValue:"").toString()}}class o extends s{constructor(e){super(e)}flipGene(e){const t=this.getGene(e);if(void 0===t)throw new Error("BinaryChromosomeBase - Cannot Flip a gene which is undefined");this.replaceGene(e,new n(0===t.mValue?1:0))}toString(){return this.getGenes().toString()}}class i{static anyHasRepeatedGene(e){for(const t of e){const e=t,r=[];if(e.getGenes().forEach((e=>r.push(e.mValue))),[...new Set(r)].length<e.length)return!0}return!1}static validateGenes(e,t){if(void 0!==e&&void 0===e.getGenes())return!1;if(void 0!==t)for(const e of t)if(void 0===e.getGenes())return!1;return!0}}class a{}a.current=new class extends class{getInts(e,t,r){const s=[];for(let n=0;n<e;n++)s.push(this.getInt(t,r));return s}}{getDouble(e,t){return void 0===e||void 0===t?Math.random():Math.random()*(t-e)+e}getFloat(e,t){return Math.random()*(t-e)+e}getInt(e,t){return e=Math.ceil(e),t=Math.floor(t),Math.floor(Math.random()*(t-e)+e)}getUniqueInts(e,t,r){const s=[];for(let e=t;e<r;e++)s.push(e);return s.sort((()=>.5-Math.random())).slice(0,e)}};class h extends s{constructor(e,t,r,s,n){super(e),this.minValue=t,this.maxValue=r,this.unique=void 0!==s,this.randomValues=void 0===n?!0===s?a.current.getUniqueInts(e,t,r):a.current.getInts(e,t,r):n,this.createGenes()}createNew(){return new h(this.length,this.minValue,this.maxValue)}generateGene(e){return new n(this.randomValues[e])}}class l{}l.convertBinToFloat32=e=>{const t=parseInt(e,2);if(t>0||t<0){const e=t>>>31?-1:1;let r=(t>>>23&255)-127;const s=(8388608+(8388607&t)).toString(2);let n=0;for(let e=0;e<s.length;e+=1)n+=parseInt(s[e])?Math.pow(2,r):0,r--;return n*e}return 0},l.convertFloat32ToBin=e=>{const t=new DataView(new ArrayBuffer(4));return t.setFloat32(0,e),r=Array.apply(null,{length:4}).map(((e,r)=>(e=>("00"+e.toString(16)).slice(-2))(t.getUint8(r)))).join(""),parseInt(r,16).toString(2).padStart(32,"0");var r},l.convertFloat32ToHex=e=>{const t=new DataView(new ArrayBuffer(4));return t.setFloat32(0,e),Array.apply(null,{length:4}).map(((e,r)=>(e=>("00"+e.toString(16)).slice(-2))(t.getUint8(r)))).join("")},l.convertHexToFloat32=e=>{const t=parseInt(e,16);if(t>0||t<0){const e=t>>>31?-1:1;let r=(t>>>23&255)-127;const s=(8388608+(8388607&t)).toString(2);let n=0;for(let e=0;e<s.length;e+=1)n+=parseInt(s[e])?Math.pow(2,r):0,r--;return n*e}return 0};class c extends o{constructor(e,t,r=!0){let s=0;t.forEach((e=>s+=e.toString(2).length)),super(!0===r?s:32*e.length),this.minValue=e,this.maxValue=t,this.isIntValue=r,this.originalValue=this.flatten(e,t),this.createGenes()}createNew(){return new c(this.minValue,this.maxValue,this.isIntValue)}ensureCapacity(){return!0}expand(){const e=[],t=this.getGenes();if(!0===this.isIntValue){const r=[];for(const e of this.maxValue)r.push(e.toString(2).length);for(let s=0,n=0;s<t.length;s+=r[n],n++){const o=t.slice(s,s+r[n]).toString().replace(/,/g,"");e.push(parseInt(o,2))}}else for(let r=0;r<t.length;r+=32){const s=t.slice(r,r+32).toString().replace(/,/g,"");e.push(l.convertBinToFloat32(s))}return e}flatten(e,t){let r="";if(!0===this.isIntValue)for(let s=0;s<e.length;s++){const n=e[s],o=t[s];let i=0;i=a.current.getInt(n,o);const h=o.toString(2).length;r+=i.toString(2).padStart(h,"0")}else for(let s=0;s<e.length;s++){const n=e[s],o=t[s];let i=0;i=a.current.getFloat(n,o),r+=l.convertFloat32ToBin(i)}return r.split("").map(Number)}generateGene(e){const t=this.originalValue[e];return new n(t)}}class u{constructor(e,t,r){this.parentNumber=e,this.childrenNumber=t,this.minChromosomeLength=r}cross(e){if(null==e)throw new Error("Error - CrossOverbase: Number of parents cannot be null.");if(e[0].length<this.minChromosomeLength)throw new Error("Error: A chromosome should have at least 0 genes");return this.performCross(e)}}class m extends u{constructor(){super(2,2)}performCross(e){const t=e[0],r=e[1];if(i.anyHasRepeatedGene(e))throw new Error("Alternating cross over has repeated");return[this.createChild(t,r),this.createChild(r,t)]}createChild(e,t){const r=[],s=new h(e.length),o=[...e.getGenes()],i=[...t.getGenes()],a=[],l=[];o.forEach((e=>a.push(e.mValue))),i.forEach((e=>l.push(e.mValue)));const c=o.length;for(;r.length<c;)r.includes(a[0])?a.shift():r.push(a.shift()),r.includes(l[0])?l.shift():r.push(l.shift());for(let t=0;t<e.length;t++)s.replaceGene(t,new n(r[t]));return s}}class p extends u{constructor(e){super(2,2),void 0!==e&&(this.swapPointIndex=e)}performCross(e){const t=e[0],r=e[1],s=t.getGenes().length-1;if(void 0===this.swapPointIndex&&(this.swapPointIndex=a.current.getInt(0,t.getGenes().length-1)),this.swapPointIndex>=s)throw new Error("SwapPointIndex - The swap point index.");return this.createChildren(t,r)}createChild(e,t){const r=this.swapPointIndex+1,s=e.createNew(),n=e.getGenes().slice(0,r),o=t.getGenes().slice(r,t.getGenes().length-1),i=n.concat(o);return s.replaceGenes(0,i),s}createChildren(e,t){return[this.createChild(e,t),this.createChild(t,e)]}}class d{}d.orderedCrossover=(e,t,r,s)=>{const n=[...e];let o=[...t];const i=e.length,h=a.current.getUniqueInts(2,0,i).sort(((e,t)=>e-t));void 0===r&&(r=h[0]),void 0===s&&(s=h[1]);const l=[],c=[];for(let e=r;e<s;e++)c.push(n[e]),l[e]=n[e];o=o.filter((e=>!c.includes(e)));for(let e=0;e<r;e++)l[e]=o.shift();for(let e=s;e<i;e++)l[e]=o.shift();return l},d.pmxCrossOver={};class f extends u{constructor(){super(2,2),this.isOrdered=!0}performCross(e){const t=e[0],r=e[1];if(!i.validateGenes(t))throw new Error("Ordered Crossover - Cannot be used! Parent has duplicate genes.");if(i.anyHasRepeatedGene([t,r]))throw new Error("Ordered Crossover - Parents have repeated genes");let s=a.current.getUniqueInts(2,0,t.length);s=s.sort(((e,t)=>e-t));const n=s[0],o=s[1];return[this.createChild(t,r,n,o),this.createChild(r,t,n,o)]}createChild(e,t,r,s){const n=e.getGenes(),o=t.getGenes(),i=d.orderedCrossover(n,o,r,s),a=e.createNew();let h=0;for(const e of i)a.replaceGene(h,e),h++;return a}}class g extends u{constructor(e){super(2,2),this.mixProbability=e}performCross(e){const t=e[0],r=e[1],s=t.createNew(),n=r.createNew(),o=[];for(let e=0;e<t.length;e++)Math.random()<this.mixProbability?(s.replaceGene(e,s.getGene(e)),n.replaceGene(e,r.getGene(e))):(s.replaceGene(e,r.getGene(e)),n.replaceGene(e,t.getGene(e)));return o.push(s),o.push(n),o}}class w{cross(e,t,r,s){const n=e.minSize;let o=[];for(let e=0;e<n;e+=t.parentNumber){const e=s.slice(2).splice(0,t.parentNumber);if(e.length===t.parentNumber&&a.current.getDouble()<=r){const r=t.cross(e);o=o.concat(r)}}return o}mutate(e,t,r){for(const s of r)e.mutate(s,t)}}class C{mutate(e,t){this.performMutate(e,t)}}class v extends C{performMutate(e,t){throw new Error("Method not implemented.")}}class G{constructor(e,t){if(e<1)throw new Error("Generation number "+e+"is invalid.");if(t.length<2)throw new Error("A generation should have at least 2 chromosome");this.num=e,this.creationDate=new Date,this.chromosomes=t}end(e){this.chromosomes=this.chromosomes.filter((e=>!0===this.validateChromosome(e))).sort(((e,t)=>t.fitness-e.fitness)),this.chromosomes=this.chromosomes.slice(0,e),this.bestChromosomes=this.chromosomes[0]}getChromosome(){return this.chromosomes}toString(){return this.bestChromosomes.getGenes().toString()}validateChromosome(e){if(null==e.fitness)throw new Error("No fitness");return!0}}class b{constructor(e,t,r){if(this.toString=()=>{let e="";for(const t of this.generations)e+=this.generations.toString();return e},e<2)throw new Error;if(t<e)throw new Error;this.creationDate=new Date,this.minSize=e,this.maxSize=t,this.generations=[],this.adamChromosome=r,this.bestChromosome=r,this.createInitialGeneration()}createInitialGeneration(){this.generations=[],this.generationNumber=0;const e=[];for(let t=0;t<this.minSize;t++){const t=this.adamChromosome.createNew();if(null==t)throw new Error("");e.push(t)}this.createNewGeneration(e)}createNewGeneration(e){this.currentGeneration=new G(++this.generationNumber,e),this.generations.push(this.currentGeneration)}endCurrentGeneration(){this.currentGeneration.end(this.maxSize),(this.bestChromosome.fitness<this.currentGeneration.chromosomes[0].fitness||void 0===this.bestChromosome)&&(this.bestChromosome=this.currentGeneration.chromosomes[0])}}class S extends class{constructor(e,t){this.canCollapse=e,this.canExpand=t}selectChromosome(e,t,r){if(void 0===e)throw new Error("The population is undefined.");if(!this.canExpand&&t.length<e.minSize)throw new Error("Chromosome cannot be selected as the number of offsprings exceed the min size of the population.");return this.performSelectChromosome(e,t,r)}}{constructor(e){super(!1,!0)}performSelectChromosome(e,t,r){const s=e.minSize-t.length;let n=[];return s>0&&(n=[...r].sort(((e,t)=>t.fitness-e.fitness)).slice(0,s)),t.concat(n)}}class x extends class{constructor(e){this.minNumberChromosome=e}selectChromosomes(e,t){if(e<this.minNumberChromosome)throw new Error("");return this.performSelectChromosome(e,t)}}{constructor(){super(2)}performSelectChromosome(e,t){if(void 0===t)throw new Error("EliteSelection - No generation for Elite Selection");return t.getChromosome().sort(((e,t)=>t.fitness-e.fitness)).slice(0,e)}}class E{hasReached(e){return this.mHasReached=this.performHasReached(e),this.mHasReached}}class y extends E{constructor(e){super(),this.expectedGenerationNumber=null==e?100:e}performHasReached(e){return e.generationsNumber>=this.expectedGenerationNumber}}var N;!function(e){e[e.NotStarted=0]="NotStarted",e[e.Started=1]="Started",e[e.Stopped=2]="Stopped",e[e.Resumed=3]="Resumed",e[e.TerminationReached=4]="TerminationReached"}(N||(N={}));class I{constructor(e,t,r=new x,s=new g(.5),n=new v,o=new S,i=new y(100)){this.defaultCrossOverProbability=.75,this.defaultMutationProbability=.3,this.isMaximized=!0,this.start=()=>{const e=[];for(this.timeEvolving=new Date;!1===this.termination.hasReached(this);)this.evolveOneGeneration(),e.push(this.bestChromosome),this.generationsNumber++;return e},this.fitnessMap=e=>{const t=new Map;if(void 0===t.get(e)){const r=this.fitness.evaluate(e);return t.set(e,r),r}return t.get(e)},this.promiseArr=e=>{const t=[];for(let r=0;r<e;r++){const e=new Promise(((e,t)=>e(this.evolveOneGeneration())));t.push(e)}Promise.all(t).then((e=>{}))},this.selection=r,this.population=e,this.fitness=t,this.crossOver=s,this.mutation=n,this.termination=i,this.operatorStrategy=new w,this.reinsertion=o,this.generationsNumber=0}clone(){return new I(new b(this.population.minSize,this.population.maxSize,this.population.bestChromosome),this.fitness,this.selection,this.crossOver,this.mutation,this.reinsertion,this.termination)}evolveOneGeneration(){this.evaluateFitness();const e=this.selectParents(),t=this.cross(e);this.mutate(t);const r=this.reinsert(t,e);return this.population.createNewGeneration(r),this.endCurrentGeneration()}cross(e){return this.operatorStrategy.cross(this.population,this.crossOver,this.defaultCrossOverProbability,e)}endCurrentGeneration(){return this.evaluateFitness(),this.population.endCurrentGeneration(),this.bestChromosome=this.population.bestChromosome,!0}evaluateFitness(){const e=this.population.currentGeneration.chromosomes;for(const t of e){const e=t,r=this.fitnessMap(e);e.fitness=r}}mutate(e){this.operatorStrategy.mutate(this.mutation,this.defaultMutationProbability,e)}reinsert(e,t){return this.reinsertion.selectChromosome(this.population,e,t)}selectParents(){return this.selection.selectChromosomes(this.population.minSize,this.population.currentGeneration)}}class M extends C{constructor(){super(),this.rnd=a.current}performMutate(e,t){const r=e;if(null==r)throw new Error("Flip bit cant be done");if(this.rnd.getDouble()<=t){const t=this.rnd.getInt(0,e.length);r.flipGene(t)}}}class V extends C{performMutate(e,t){this.validateLength(e);const r=a.current;if(r.getDouble()<=t){const t=r.getUniqueInts(2,0,e.length).sort(((e,t)=>e-t)),s=t[0],n=t[1],o=e.getGenes().slice(s,n),i=this.mutateOnSequence(o);e.replaceGenes(s,i)}}validateLength(e){if(e.length<3)throw new Error("SequenceMutationBase - A chromosome should have at least 3 genes")}}class O extends V{mutateOnSequence(e){return[...e].sort((()=>.5-Math.random()))}}class P extends V{mutateOnSequence(e){return e.reverse()}}class F extends class{constructor(e,t){void 0===e&&(this.minOperands=2),this.terminations=[],void 0!==t&&this.terminations.concat(t)}hasReached(e){if(this.terminations.length<this.minOperands)throw new Error("There should be at least one termination.");return this.performHasReached(e)}}{constructor(e){super(e.length,e)}performHasReached(e){let t=!1;for(const r of this.terminations)if(t=r.hasReached(e),!1===t)return!1;return!0}}class R extends E{constructor(e){super(),this.expectedStagnationGenerationNumber=null==e?100:e}performHasReached(e){if(void 0===e.bestChromosome)return!1;const t=e.bestChromosome.fitness;return this.mLastFitness===t?this.mStagnantGenerationCount++:this.mStagnantGenerationCount=1,this.mLastFitness=t,this.mStagnantGenerationCount>=this.expectedStagnationGenerationNumber}}class T extends E{constructor(e){super(),this.expectedFitness=void 0===e||null==e?1:e}performHasReached(e){return e.bestChromosome.fitness>=this.expectedFitness}}}},t={};function r(s){if(t[s])return t[s].exports;var n=t[s]={exports:{}};return e[s](n,n.exports,r),n.exports}return r.d=(e,t)=>{for(var s in t)r.o(t,s)&&!r.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r(590)})()}));